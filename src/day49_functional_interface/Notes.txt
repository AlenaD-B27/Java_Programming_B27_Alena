Generics:
<> allow us to define any object type:
   --->  E - element
   --->  K - key
   --->  V - value
   --->  T - any type
   --->  R - return type
   --->  U - second argument


   Built Functional Interface:

   ... Predicate<T>
   defines a function that takes one object as the argument
   returns: boolean;
   method: boolean test(T t);

   ... Consumer<T>
   defines a function that takes one object as the argument
   return: void;
   method: void accept(T t);

   ... Function<T, R>
   defines a function that takes one object as the argument
   returns: one object;
   method: R apply(T t);

   BiPredicate<T, U>
   defines a function that takes two objects as the arguments
   returns: boolean;
   method: boolean test(T t, U u);

   BiConsumer<T, U>
   defines a function that takes two objects as the arguments
   returns: void;
   method: void accept(T t, U u);

   BiFunction<T, U, R>
   defines a function that takes two objects as the arguments
   returns: an object;
   method: R apply(T t, U u);
